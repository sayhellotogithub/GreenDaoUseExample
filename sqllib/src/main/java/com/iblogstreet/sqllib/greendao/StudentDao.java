package com.iblogstreet.sqllib.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.iblogstreet.sqllib.entitiy.Student;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STUDENT".
*/
public class StudentDao extends AbstractDao<Student, Long> {

    public static final String TABLENAME = "STUDENT";

    /**
     * Properties of entity Student.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property StuId = new Property(0, Long.class, "stuId", true, "stuId");
        public final static Property StuNo = new Property(1, String.class, "stuNo", false, "stuNo");
        public final static Property StuName = new Property(2, String.class, "stuName", false, "stuName");
        public final static Property StuSex = new Property(3, String.class, "stuSex", false, "stuSex");
        public final static Property StuScore = new Property(4, String.class, "stuScore", false, "stuScore");
    }


    public StudentDao(DaoConfig config) {
        super(config);
    }
    
    public StudentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STUDENT\" (" + //
                "\"stuId\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: stuId
                "\"stuNo\" TEXT NOT NULL ," + // 1: stuNo
                "\"stuName\" TEXT NOT NULL ," + // 2: stuName
                "\"stuSex\" TEXT NOT NULL ," + // 3: stuSex
                "\"stuScore\" TEXT NOT NULL );"); // 4: stuScore
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_STUDENT_stuNo ON \"STUDENT\"" +
                " (\"stuNo\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STUDENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Student entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getStuId());
        stmt.bindString(2, entity.getStuNo());
        stmt.bindString(3, entity.getStuName());
        stmt.bindString(4, entity.getStuSex());
        stmt.bindString(5, entity.getStuScore());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Student entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getStuId());
        stmt.bindString(2, entity.getStuNo());
        stmt.bindString(3, entity.getStuName());
        stmt.bindString(4, entity.getStuSex());
        stmt.bindString(5, entity.getStuScore());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Student readEntity(Cursor cursor, int offset) {
        Student entity = new Student( //
            cursor.getLong(offset + 0), // stuId
            cursor.getString(offset + 1), // stuNo
            cursor.getString(offset + 2), // stuName
            cursor.getString(offset + 3), // stuSex
            cursor.getString(offset + 4) // stuScore
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Student entity, int offset) {
        entity.setStuId(cursor.getLong(offset + 0));
        entity.setStuNo(cursor.getString(offset + 1));
        entity.setStuName(cursor.getString(offset + 2));
        entity.setStuSex(cursor.getString(offset + 3));
        entity.setStuScore(cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Student entity, long rowId) {
        entity.setStuId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Student entity) {
        if(entity != null) {
            return entity.getStuId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Student entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
